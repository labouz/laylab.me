<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ngrok on LB</title>
    <link>https://laylab.me/tags/ngrok/</link>
    <description>Recent content in ngrok on LB</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 08 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://laylab.me/tags/ngrok/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The API and I - Exposing a Plumber API</title>
      <link>https://laylab.me/posts/the-api-and-i-exposing-a-pluber-api/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://laylab.me/posts/the-api-and-i-exposing-a-pluber-api/</guid>
      <description>


&lt;p&gt;If you had asked me two years ago to use and API in my scripts, much less develop and deploy them, I probably would have hid under
my desk. Well, I probably wouldn‚Äôt have actually hid, but I would have wanted to. Developing APIs can seem quite daunting at first, but I promise, it‚Äôs really not. If &lt;em&gt;I&lt;/em&gt; can do it &lt;em&gt;YOU&lt;/em&gt; definitely can!&lt;/p&gt;
&lt;p&gt;I am going to show how to build an API, first and then expose it in less than 5 minutes, are you ready?!&lt;/p&gt;
&lt;p&gt;First a little on APIs to get your head in the right place. ü§ì&lt;/p&gt;
&lt;div id=&#34;what-is-an-api&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;What is an API?&lt;/h3&gt;
&lt;div id=&#34;application-programming-interface&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;P&lt;/strong&gt;rogramming &lt;strong&gt;I&lt;/strong&gt;nterface&lt;/h4&gt;
&lt;p&gt;In short, it allows a user to programatically pull data from a source given that source provides one&lt;br /&gt;
&lt;em&gt;ex. The NYT, Twitter, Facebook, Google, US Census&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;how-does-it-work&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;How Does it Work?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Think of it like this, just like a Graphical User Interface (GUI) allows you to interact with your code, an API lets your code interact with other code&lt;/li&gt;
&lt;li&gt;Set of commands, functions, objects, and protocols
&lt;ul&gt;
&lt;li&gt;used to create software or interact with an external system (databases)&lt;/li&gt;
&lt;li&gt;everywhere!&lt;/li&gt;
&lt;li&gt;convenient- ready-made code to simplify the life of a programmer&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;not-only-for-getting-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Not Only for Getting Data&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Build APIs for your ML models so others can use them&lt;/li&gt;
&lt;li&gt;Write (post) to a database
&lt;ul&gt;
&lt;li&gt;and update (put) and delete (delete)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Functions
&lt;ul&gt;
&lt;li&gt;more control over what is exposed to end user&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, enough of that, let‚Äôs build one shall we?? üòâ&lt;/p&gt;
&lt;p&gt;Lucky for us, &lt;code&gt;plumber&lt;/code&gt; makes this step &lt;em&gt;really&lt;/em&gt; easy! I‚Äôm not going to go into the weeds of the details. The documentation does a really good job at this, so why be redundant!? We‚Äôre here for the part after that!
FYI:&lt;br /&gt;
üì¶: &lt;code&gt;plumber&lt;/code&gt;&lt;br /&gt;
üìñ: &lt;a href=&#34;https://www.rplumber.io/&#34; class=&#34;uri&#34;&gt;https://www.rplumber.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here, we want to expose an API that returns a dynamic plot using &lt;code&gt;ggplot2::ggplot()&lt;/code&gt; and &lt;code&gt;plotly::ggplotly()&lt;/code&gt;, specifically we are plotting the distribution of our favorite &lt;code&gt;mtcars$cyl&lt;/code&gt; data.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Wait, a couple steps back. Why are we exposing and not deploying? And what is exposing, anyways?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Good question, when you run a service such as an API or a Shiny app, for example, locally on your computer, you are running it as a server behind the scenes. You can access it through your browser by typing &lt;code&gt;localhost:portNumber&lt;/code&gt;. &lt;em&gt;Exposing&lt;/em&gt; your service is when we make this internal address (localhost) available on the internet. We are exposing whatever service on the particular port by giving it an external(public) URL.&lt;/p&gt;
&lt;p&gt;Why would we do this? Well, if you are building models or various other objects meant for production, it would be a bit of a pain to constantly build and re-deploy, especially during the beginning stages when you are more prone to bugs. You could really piss off some engineers that way! Exposing your API is a good way to test before you deploy to your production server üòä&lt;/p&gt;
&lt;p&gt;So, let‚Äôs get to it! Let‚Äôs start with our API:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(plotly)
#* Plot a dynamic histogram
#* @serializer htmlwidget
#* @get /plotly
function(){
  data(mtcars)
  x &amp;lt;- ggplot(mtcars, aes(x = as.factor(cyl))) +
    geom_bar(fill= c(&amp;quot;#8245BF&amp;quot;, &amp;quot;#05F29B&amp;quot;, &amp;quot;#F2CB05&amp;quot;)) +
    theme_minimal() +
    labs(x = &amp;quot;cylinders&amp;quot;)

  ggplotly(x)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To run your API locally just save the above script somewhere you can find it and run the following two commands in the console:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(plumber)
r &amp;lt;- plumb(&amp;quot;plumber.R&amp;quot;)
r$run(port = 8000) #this will run your api on localhost, port: 8000.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you run this you will get a screen like this from swagger:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://laylab.me/posts/2020-07-08-the-api-and-i-exposing-a-pluber-api.en_files/api_swagger.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;FYI, your local address will be localhost:8000/plotly&lt;/p&gt;
&lt;div id=&#34;now-to-the-fun-part&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Now to the fun part!&lt;/h4&gt;
&lt;p&gt;For exposing our API, we will use a service called &lt;a href=&#34;https://ngrok.com/download&#34;&gt;ngrok&lt;/a&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;You will have to create an account, this is how you will get your authentication token. The easiest would to authenticate is with your GitHub account, if you have one.&lt;/li&gt;
&lt;li&gt;Download the installation for your operating system&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://laylab.me/posts/2020-07-08-the-api-and-i-exposing-a-pluber-api.en_files/ngrok_download.png&#34; width=&#34;600&#34; /&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Open your terminal&lt;/li&gt;
&lt;li&gt;Unzip the ngrok installation files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into that directory and authenticate the application (see picture below)
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;./ngrok authtoken YOUR-AUTH-TOKEN&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://laylab.me/posts/2020-07-08-the-api-and-i-exposing-a-pluber-api.en_files/ngrok_auth.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now it‚Äôs time to expose your API! üòé&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Hopefully, you still have the localhost served. If not, just run &lt;code&gt;r$run(port=8000)&lt;/code&gt; again and you should be good.&lt;/li&gt;
&lt;li&gt;Open your terminal again. Make sure you‚Äôre in the directory where you unzipped ngrok (Applications, for me) and run &lt;code&gt;./ngrok http 8000&lt;/code&gt; and that‚Äôs it! You have now exposed port 8000 on your computer. If all went well, you should get a screen like this:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://laylab.me/posts/2020-07-08-the-api-and-i-exposing-a-pluber-api.en_files/ngrok_expose.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, all you have to do is share! Copy and paste the ‚ÄúForwarding‚Äù URL and add the path to your API and send it out for testing!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://laylab.me/posts/2020-07-08-the-api-and-i-exposing-a-pluber-api.en_files/ngrok_plotly.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
